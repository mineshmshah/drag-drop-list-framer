{"ast":null,"code":"import _slicedToArray from \"/Users/mineshshah/minesh/drag-drop-list-framer/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/mineshshah/minesh/drag-drop-list-framer/src/Card/index.tsx\";\nimport React, { useState } from 'react';\nimport { ExpandableHeader, ExpandableContainer } from './styles';\n\nvar ExpandableComponent = function ExpandableComponent(_ref) {\n  var title = _ref.title,\n      isDragging = _ref.isDragging;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isCardOpen = _useState2[0],\n      setIsCardOpen = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      hasDragged = _useState4[0],\n      setHasDragged = _useState4[1];\n\n  var onPointerDown = function onPointerDown(e) {\n    console.log('hi');\n    return setHasDragged(false);\n  };\n\n  var onPointerMove = function onPointerMove(e) {\n    if (isDragging) setHasDragged(true);\n  };\n\n  var onPointerUp = function onPointerUp(e) {\n    if (!hasDragged) {\n      e.stopPropagation();\n      setIsCardOpen(!isCardOpen);\n    }\n  }; //\n  //  const onCardClick = (e : React.MouseEvent<HTMLElement> | React.TouchEvent<HTMLElement>) => {\n  //      console.log(isDragging)\n  //      if(true) {\n  //          e.stopPropagation();\n  //          setIsCardOpen(!isCardOpen)\n  //      }\n  // };\n\n\n  return React.createElement(ExpandableContainer, {\n    isCardOpen: isCardOpen // onTouchStart={onPointerDown}\n    // onTouchMove={onPointerMove}\n    // onTouchEnd={e => onPointerUp(e)}\n    ,\n    onMouseDown: onPointerDown,\n    onMouseMove: onPointerMove,\n    onMouseUp: function onMouseUp(e) {\n      return onPointerUp(e);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, React.createElement(ExpandableHeader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, title));\n};\n\nexport default ExpandableComponent;","map":{"version":3,"sources":["/Users/mineshshah/minesh/drag-drop-list-framer/src/Card/index.tsx"],"names":["React","useState","ExpandableHeader","ExpandableContainer","ExpandableComponent","title","isDragging","isCardOpen","setIsCardOpen","hasDragged","setHasDragged","onPointerDown","e","console","log","onPointerMove","onPointerUp","stopPropagation"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,SAASC,gBAAT,EAA2BC,mBAA3B,QAAsD,UAAtD;;AAQA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,OAAoD;AAAA,MAAlDC,KAAkD,QAAlDA,KAAkD;AAAA,MAA3CC,UAA2C,QAA3CA,UAA2C;;AAAA,kBACxCL,QAAQ,CAAC,KAAD,CADgC;AAAA;AAAA,MACrEM,UADqE;AAAA,MACzDC,aADyD;;AAAA,mBAExCP,QAAQ,CAAC,KAAD,CAFgC;AAAA;AAAA,MAErEQ,UAFqE;AAAA,MAEzDC,aAFyD;;AAI5E,MAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAUC,CAAV,EAA4C;AAC9DC,IAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACA,WAAOJ,aAAa,CAAC,KAAD,CAApB;AACH,GAHD;;AAIA,MAAMK,aAAa,GAAG,SAAhBA,aAAgB,CAACH,CAAD,EAAwC;AAC1D,QAAGN,UAAH,EAAeI,aAAa,CAAC,IAAD,CAAb;AAClB,GAFD;;AAGA,MAAMM,WAAW,GAAG,SAAdA,WAAc,CAACJ,CAAD,EAAwC;AACxD,QAAG,CAACH,UAAJ,EAAgB;AACZG,MAAAA,CAAC,CAACK,eAAF;AACAT,MAAAA,aAAa,CAAC,CAACD,UAAF,CAAb;AACH;AACJ,GALD,CAX4E,CAiB5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SACI,oBAAC,mBAAD;AACI,IAAA,UAAU,EAAEA,UADhB,CAEI;AACA;AACA;AAJJ;AAKI,IAAA,WAAW,EAAEI,aALjB;AAMI,IAAA,WAAW,EAAEI,aANjB;AAOI,IAAA,SAAS,EAAE,mBAAAH,CAAC;AAAA,aAAII,WAAW,CAACJ,CAAD,CAAf;AAAA,KAPhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASI,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKP,KADL,CATJ,CADJ;AAeH,CAzCD;;AA2CA,eAAeD,mBAAf","sourcesContent":["import React, { useState } from 'react';\nimport { motion } from \"framer-motion\";\nimport { ExpandableHeader, ExpandableContainer } from './styles'\nimport SubCard from '../SubCard'\n\ninterface ExpandableComponentProps {\n    title: string,\n    isDragging: boolean\n}\n\nconst ExpandableComponent = ({title, isDragging} : ExpandableComponentProps) => {\n    const [isCardOpen, setIsCardOpen] = useState(false);\n    const [hasDragged, setHasDragged] = useState(false)\n\n    const onPointerDown = function (e: React.MouseEvent<HTMLElement>) {\n        console.log('hi')\n        return setHasDragged(false);\n    };\n    const onPointerMove = (e :  React.MouseEvent<HTMLElement>) => {\n        if(isDragging) setHasDragged(true)\n    };\n    const onPointerUp = (e : React.MouseEvent<HTMLElement> ) => {\n        if(!hasDragged) {\n            e.stopPropagation();\n            setIsCardOpen(!isCardOpen)\n        }\n    };\n    //\n    //  const onCardClick = (e : React.MouseEvent<HTMLElement> | React.TouchEvent<HTMLElement>) => {\n    //      console.log(isDragging)\n    //      if(true) {\n    //          e.stopPropagation();\n    //          setIsCardOpen(!isCardOpen)\n    //      }\n    // };\n\n    return (\n        <ExpandableContainer\n            isCardOpen={isCardOpen}\n            // onTouchStart={onPointerDown}\n            // onTouchMove={onPointerMove}\n            // onTouchEnd={e => onPointerUp(e)}\n            onMouseDown={onPointerDown}\n            onMouseMove={onPointerMove}\n            onMouseUp={e => onPointerUp(e)}\n        >\n            <ExpandableHeader>\n                {title}\n            </ExpandableHeader>\n        </ExpandableContainer>\n    );\n};\n\nexport default ExpandableComponent;\n"]},"metadata":{},"sourceType":"module"}